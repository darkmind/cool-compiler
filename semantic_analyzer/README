
Write-up for PA3
----------------
user: yushiw
user: jayhp9

#################### DESIGN ####################

-------------------- Overview -------------------

Our semantic analyzer proceeds in the following manner:
1. Construct the inheritance hierarchy of classes and check whether the class 
definitions are well-defined (elaborated in Inheritance section below). This 
requires us to traverse over all the classes in the AST (and so does not qualify
as a full traversal of the tree).

2. Traverse the AST down to the features, to construct a feature table. The 
feature table is a hashmap which maps class names to a struct containing two 
more hashmaps called 'methods' and 'attributes'. Essentially, these are just the
methods and attributes in that class. The feature table is used as a global 
table that is helpful for us to retrieve pointers to method_class and attr_class
tree nodes to retrieve various information about these features and for error 
checking.

3. Check for valid Main class and main() method within it.

4. Instantiate a symbol table and begin the actual traversal of the AST that 
will recursively enter scopes as it proceeds and type check each node of the 
tree according to the rules mentioned in Chapter 12 of the Cool Manual.

-------------------- Inheritance -------------------

First, we conduct a mini-traversal over the AST to detect inheritance problems 
and construct a legal inheritance hierarchy. Here is what it does:

1. Check whether a user-defined class has the same name as one of the basic 
classes: Object, IO, Str, Int, Bool and SELF_TYPE

2. Check whether a user-defined class inherits from Bool, Str, or Int, which is
not allowed

3. Check whether a user-defined class is defined more than once

4. Check whether SELF_TYPE is defined or inherited from

5. Check whether all classes that are inherited from are actually defined 
somewhere in the file

At the end of these checks, if there are any compilation errors, we halt 
compilation and report errors. If there are no errors, then we proceed to check
for inheritance cycles in the inheritance hierarchy. If there is a cycle, we 
halt compilation.

Our inheritance hierarchy is stored in a hashmap, which maps each class name to 
the name of its parent. Classes that do not inherit from a user-defined class 
(i.e. inherit directly from Object) have Object as their value.

We also call install_basic_classes() to define the basic classes Object, IO, 
Int, Bool and Str in the inheritance hierarchy, so that user-defined classes 
that inherit from Object and IO (Int, Bool and Str cannot be inherited from) are
still considered valid class definitions.

Throughout this document, we refer to this inheritance hierarchy as the 'class 
table' for convenience.

In addition to the table, we provided a lca (lowest common ancestor) and 
is_child function in the class_table in order to quickly process inheritance.

-------------------- Feature and Symbol Design -------------------

As mentioned before already, all our features per class were stored in a global
feature table that maps class names to its features. This turned out to be a 
great design decision because it made it very easy for us to access features 
from any place in semant.cc.

We used the provided implementation of the symbol table. We entered new scopes 
on these 4 occasions:

i. New class (to contain attribute definitions and method declarations)
ii. Let expression
iii. Case branches
iv. Formal parameters of methods

We used lookup() to look up the symbol table on various occasions, primarily to
check whether an attribute or method has already been defined before in the 
current scope or list of containing scopes. We used probe() to ensure that a 
formal parameter of a method is not redefined in the same scope.

-------------------- Type Checking and Annotation -------------------

To implement type checking, we followed the rules defined in Chapter 12 of the 
Cool Manual for type checking. Initially, we simply implemented the rules
without paying attention self or SELF_TYPE. After all the rules were
implemented, we added self by putting in our symbol table and catching all bad
instances where self can't be used, added SELF_TYPE to all of our rules, and
modified our lca and is_child functions to support SELF_TYPE comparisons

We annotate the AST by calling set_type() on each expression after evaluating it,
using its inferred type. This translates into the annotated tree upon successful
compilation.


-------------------- Error Checking -------------------
We created a new ErrorReporter class which contains the semant_error() methods 
that are responsible for reporting errors and counting the number of errors 
encountered thus far. We also made this class global so that all methods in the 
file could access the semant_error() methods, since they need to be used in so 
many places.

As part of error checking, we extensively used the class table to check whether 
a class was defined, whether its parent was defined, whether a class is a child 
of another (by traversing the class table). We used the feature table to obtain
information about a class' methods and attributes and pointers to their nodes in
the AST. This was very handy, because we needed to use them for error reporting 
as well as obtaining more information about these methods and attributes (such 
as their type, name, etc.) We added helper methods in cool-tree.handcode.h to 
help us retrieve those pieces of information with ease.


#################### TESTING ####################

We wrote specific test cases for a variety of expressions, rigorously testing 
dispatch expressions, which caused the most number of problems for us. We also 
used the .cl files in the /usr/class/cs143/examples directory as general tests 
that revealed numerous problems for us early on. All the tests are available in 
the tests/ directory.


