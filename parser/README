Write-up for PA2
-----------------------
user: jayhp9
user: yushiw
############### DESIGN ###############

--------------------Grammar Overview--------------------

The non-terminals found in our parser (disregarding program, since that was done for us) all fall into the following types:

i) Classes - The largest building blocks of programs. 

Non-terminals of this type are 'class' and 'class_list', which represent a single class and a semi-colon separated list of one or more classes, respectively

ii) Features - The chunks of code found within classes. Features can be of the type methods or attributes, though the only difference between them as far as this assignment concerned is their structure. 

The non-terminals for features are 'feature', which is a single method or attribute, or 'feature_list', a semi-colon separated list of one or more features.

iii) Formals - The arguments of method features and are a simple 'ObjectID : TypeID' phrase.

The non-terminals for formals are 'formal', a single 'ObjectID : TypeID' phrase, or 'formal_list', a comma-separated list of one or more formals.

iv) Expressions - The vast majority of the rules fall into this class of non-terminals. Expressions represent the finest granularity rules that interact directly with the terminals. Expression non-terminals can be roughly divided into the following subclasses:
Expression lists ('expr_comma_list, expr_comma_list_wrap, expr_semi_list') - these are the inputs for dispatches and blocks
Expression argument lists ('case', 'case_list', 'let_args') - Used for expressions that have lists of arguments, like case/esac, and let bindings
if/while expressions, which have multiple parts
Unary/Binary operators (arithmetic, comparisons, not)
Single arguments like constants, identifiers, and (expression)

For the most part, these rules have self-explanatory production rules and semantic analysis. For the production rules, anything that didn't have a Kleene operator was easily translated into a production rule by copying from figure 1 (there isn't any possibility for ambiguity among these rules), and called the constructors in cool-tree.cc.

For example, for the 'expr ::= if expr then expr else expr fi' rule, we created a production rule for 'expression' where it can go to

IF expression THEN expression ELSE expression FI

and called the constructor cond($2, $4, $6), extracting the second, fourth, and sixth tokens (the useful ones) and set $$ equal to the result.

while a production rule involving another non-terminal like 'formal ::= ObjectID : TypeID' became 

	OBJECTID ':' TYPEID

Now, special mention must be given to the list production rules. To avoid ambiguity, any Kleene operator became its own non-terminal production, usually of the form <singular>_list, like 'formal_list'. In this list production, the list can either produce an empty string (for semi-colon separated lists) or a single (for comma separated lists, since there's no comma at the end) for a base case. Alternatively, the list can produce itself (left recursion) followed by a singular non-terminal, like the rule

	class_list : class_list class ';'

To account for empty comma separated lists, like for the inputs of dispatches, we either made a special rule to catch it or a wrapper non-terminal (expr_comma_list_wrap), which either produces a single empty string or a single strictly non-empty comma separated list. This avoids all ambiguity.

The semantic actions for formal lists are fairly straightforward, we simply call 
nil_<insert type here>, Single_<insert type here>, or append() with the correct argument numbers for the left recursion and the single production.

--------------------Precedence Rules--------------------

Of course, we needed implement precedence rules as well to determine which operators had higher bindings among the expressions. Fortunately for us, the precedence rules that were needed are conveniently listed on page 17, under section 11.1 - Precedence. 

We just copied the rules, along with their associative properties (left, right, or none) over into our cool.y file under 'Precedence Declarations go here' in the ascending order of priority that was given to us.

In addition, however, we also added a precedence declaration for the 'in' operator to prevent any ambiguity. We guessed that this should be of the lowest priority and left-associative, since we want let statements to stretch as far to the right as possible, grabbing as many things as possible. 

--------------------Error catching--------------------
We use the error pseudo-nonterminal to capture errors that occur in the following 4 cases:

1) List of classes separated by semi-colons
2) List of features separated by semi-colons
3) List of expressions separated by semi-colons
4) List of arguments separated by commas in a let expression

This was pretty straightforward because Bison provides a very neat way of specifying error handling. To catch these, we simply add a rule for every list non-terminal production in which a singular object is replaced by an error token. For example:

class_list : class_list class ';'

got the corresponding rule

	class_list : class_list error ';'

By doing so, we recover from any instances of error tokens that can be recovered from.

############### TESTING ###############

To test our parser, we went through the COOL manual step by step thoroughly, picking out every single situation where we could make a test case from. We ended up with a very comprehensive test suite that tested the following main errors:

1. Class definition errors
Redefining a class
Class ended prematurely
Inherit from a non-type-identifier
Inherit from multiple classes
Misspelled class name to be inherited
Keyword inherits misspelled
Closing brace for class is missing
Class name is not a type identifier
No ending semi-colon
Define classes with the same name as IO, String, Bool, Int

2. Feature errors
Malformed attributes (Int, Bool, String and all their possible variations)
Malformed method definitions
Feature name beginning with a capital letter
Empty features
Incorrect case of feature names

3. Errors with self and SELF_TYPE
Valid uses of self and SELF_TYPE (new SELF_TYPE, SELF_TYPE as a return value, SELF_TYPE as an attribute type etc)
Invalid uses of self and SELF_TYPE (self and SELF_TYPE in place of identifier names etc)

4. Errors with usage of void
Using void as if it were a keyword
Assigning void to an attribute
Dispatching a method to void
Treating void like an expression

5. Arithmetic and Comparison Operators
Random permutations of *, /, +, -, with Ints, Bools and Strings

6. Basic classes' methods
Calling out_string(), out_int(), in_string() etc. to check that the parser recognizes them as special methods

7. Errors with while loops
Missing first expression
Missing second expression
Missing expressions

8. Let expression errors
Misspelled argument types
Argument is of type self

9. Errors with blocks containing list of expressions
Incorrectly nested blocks
Extra semicolons
Empty blocks

10. Error recovery with classes, features, expressions within blocks and arguments within let expressions
(Further explained in the Error Catching portion of the Grammar Overview above)

(Note: The specific cases mentioned under each of the above 10 cases are just the most important ones. In the actual test files, there are those and more.)

Our main test suite is distributed into two test files called 'mainTest1.cl' and 'mainTest2.cl' within the 'tests' folder in the project directory. These two files together contain our most important tests for the above mentioned cases (and more smaller edge cases). For each case, we have both good tests and bad tests. The bad tests are variations of the good input, i.e. with inaccurate syntax introduced. In other words, we test to see that the parser runs well on good input and reports errors properly on bad input. In addition to this, we also run our code on the well-formed .cl files available in /usr/class/cs143/examples/ as additional good input just for more testing purposes. Besides these main tests, we have some small tests written in good.cl, lets.cl, features.cl, misc.cl and semi.cl (all of which are also in the tests folder). These small tests tests specific, small aspects of the Cool syntax. Most of these are already covered in one form or another in mainTest1.cl and mainTest2.cl, but we thought of leaving these small tests in there anyway because they passed.

